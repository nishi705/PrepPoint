package main.Advance.Dynamic_Programming;
/*
Problem Description
Given a string A, find if there is any subsequence that repeats itself.

A subsequence of a string is defined as a sequence of characters generated by deleting some characters in the string without changing the order of the remaining characters.

NOTE:
1. Subsequence length should be greater than or equal to 2.
2. The repeating subsequence should be disjoint that is in both the sequence no character in the same order and position should be taken from the same index of the original string.



Problem Constraints
1 <= length(A) <= 100



Input Format
The first and the only argument of input contains a string A.



Output Format
Return an integer, 1 if there is any subsequence which repeat itself else return 0.



Example Input
Input 1:

 A = "abab"
Input 2:

 A = "abba"


Example Output
Output 1:

 1
Output 2:

 0


Example Explanation
Explanation 1:

 "ab" is repeated.
Explanation 2:

 There is no repeating subsequence.
 */
public class Repeating_Subsequence {
}
/*
public class Solution {
    public int anytwo(String A) {

        int n = A.length();
        int[] first = new int[n+1];
        int[] second = new int[n+1];

        for(int i=1; i<n; i++)
        {
            for(int j=i+1; j<=n; j++)
            {
                if(A.charAt(i-1) == A.charAt(j-1))
                    second[j] = 1+first[j-1];
                else
                    second[j] = Math.max(first[j], second[j-1]);
            }
            int[] temp = first;
            first = second;
            second = temp;
        }

        if(first[n] >= 2)
            return 1;
        return 0;
    }
}

 */